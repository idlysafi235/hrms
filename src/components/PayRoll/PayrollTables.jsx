import React, { useState, useMemo, useEffect } from "react";
import { FaArrowLeft, FaArrowRight } from 'react-icons/fa';
import "./PayrollTables.css";

const monthNames = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December"
];

const PayrollTables = ({ payrolls, showModal }) => {
  const currentDate = new Date();
  const currentYear = currentDate.getFullYear();
  const currentMonth = currentDate.getMonth() + 1;

  const [selectedYear, setSelectedYear] = useState(currentYear);
  const [selectedMonth, setSelectedMonth] = useState(currentMonth);

  const getAvailableMonths = () => {
    return Array.from({ length: 12 }, (_, i) => i + 1); 
  };
  
  const availableMonths = useMemo(getAvailableMonths, []);
  

  useEffect(() => {
    const months = getAvailableMonths();
    if (!months.includes(selectedMonth)) {
      setSelectedMonth(months[months.length - 1]);
    }
  }, [selectedYear]);

  const handleYearChange = (delta) => {
    setSelectedYear((prev) => prev + delta);
  };

  const filteredPayrolls = useMemo(
    () =>
      payrolls.filter(
        (p) => p.year === selectedYear && p.month === selectedMonth
      ),
    [selectedYear, selectedMonth, payrolls]
  );

  const hourly = filteredPayrolls.filter(
    (p) => p.payType === "hourly" || p.isHourly
  );
  const monthly = filteredPayrolls.filter(
    (p) => p.payType !== "hourly" && !p.isHourly
  );

  const renderTable = (data, title) => (
    <>
      <h3>{title}</h3>
      {data.length === 0 ? (
        <p className="empty-state">No payroll records found.</p>
      ) : (
        <table className="table">
          <thead>
            <tr>
              <th>Employee ID</th>
              <th>{title.includes("Hourly") ? "Total Salary" : "Gross Salary"}</th>
              <th>Net Pay</th>
              <th>TDS</th>
              <th>Generated By</th>
            </tr>
          </thead>
          <tbody>
            {data.map((p, index) => (
              <tr key={index}>
                <td>
                  <button onClick={() => showModal(p)} className="link-button">
                    {p.employeeId}
                  </button>
                </td>
                <td>₹{(p.totalSalary ?? p.grossSalary ?? 0).toFixed(2)}</td>
                <td>₹{p.netPay?.toFixed(2)}</td>
                <td>₹{p.tds?.toFixed(2)}</td>
                <td>{p.generatedBy}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </>
  );

  return (
    <div className="payroll-tables">
      <div className="filter-bar">
      <div className="year-navigation">
        <FaArrowLeft
           className="year-arrow"
           onClick={() => handleYearChange(-1)}
           title="Previous Year"
       />
      <span className="year-display">{selectedYear}</span>
      <FaArrowRight
        className="year-arrow"
        onClick={() => handleYearChange(1)}
        title="Next Year"
      />
    </div>
        <label>
          Select Month:
          <select
            value={selectedMonth}
            onChange={(e) => setSelectedMonth(Number(e.target.value))}
          >
            {availableMonths.map((m) => (
              <option key={m} value={m}>
                {monthNames[m - 1]}
              </option>
            ))}
          </select>
        </label>
      </div>

      {payrolls.length === 0 ? (
        <p className="empty-state">No payrolls available.</p>
      ) : (
        <>
          {renderTable(hourly, "Hourly Payrolls")}
          {renderTable(monthly, "Monthly Payrolls")}
        </>
      )}
    </div>
  );
};

export default PayrollTables;
