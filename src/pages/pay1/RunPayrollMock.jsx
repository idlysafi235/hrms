import React, { useEffect, useState } from 'react';
import { runPayroll, fetchAllPayrolls } from '../../api/payrollService';
import { getToken } from '../../utils/auth';


export default function RunPayroll() {
  const [payrolls, setPayrolls] = useState([]);
  const [message, setMessage] = useState('');
  const [employeeId, setEmployeeId] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [month, setMonth] = useState(new Date().getMonth() + 1);
  const [year, setYear] = useState(new Date().getFullYear());
  const [selectedPayroll, setSelectedPayroll] = useState(null);

  const token = getToken();
  const user = JSON.parse(localStorage.getItem('user'));
  const currentEmployeeId = user?.employeeId;

  const handleGenerate = async () => {
    if (!employeeId) return setMessage('Please enter employee ID');
    try {
      setIsLoading(true);
      setMessage('');
      await runPayroll(token, {
        employeeId,
        month,
        year,
        generatedBy: currentEmployeeId,
      });
      setMessage('Payroll generated successfully!');
      await loadPayrolls();
    } catch (error) {
      setMessage(`❌ ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  const loadPayrolls = async () => {
    try {
      const records = await fetchAllPayrolls(token);
      setPayrolls(records);
    } catch (error) {
      console.error('Load payrolls error:', error);
    }
  };

  useEffect(() => {
    loadPayrolls();
  }, []);

  const showModal = (payroll) => setSelectedPayroll(payroll);
  const closeModal = () => setSelectedPayroll(null);

  const hourlyPayrolls = payrolls.filter(p => p.isHourly);
  const otherPayrolls = payrolls.filter(p => !p.isHourly);

  const renderTable = (data, title) => (
    <>
      <h3>{title}</h3>
      {data.length === 0 ? (
        <p>No payrolls found.</p>
      ) : (
        <table className="table">
          <thead>
            <tr>
              <th>Employee ID</th>
              <th>Month</th>
              <th>Year</th>
              <th>{title.includes('Hourly') ? 'Total Salary' : 'Gross'}</th>
              <th>Net Pay</th>
              <th>TDS</th>
              <th>Generated By</th>
            </tr>
          </thead>
          <tbody>
            {data.map((p, index) => (
              <tr key={index}>
                <td>
                  <button
                    onClick={() => showModal(p)}
                    style={{ cursor: 'pointer', background: 'none', border: 'none', color: 'blue', textDecoration: 'underline' }}
                  >
                    {p.employeeId}
                  </button>
                </td>
                <td>{p.month}</td>
                <td>{p.year}</td>
                <td>{p.totalSalary.toFixed(2)}</td>
                <td>{p.netPay?.toFixed(2)}</td>
                <td>{p.tds?.toFixed(2)}</td>
                <td>{p.generatedBy}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </>
  );

  const filteredModalFields = (payroll) => {
    const excludeFields = new Set([
      'id', 'isHourly', 'payType'
    ]);

    const hourlyExclude = [
      'basic', 'hra', 'specialAllowance', 'medicalAllowance', 'conveyanceAllowance',
      'leavetravelAssistance', 'phoneinternetReimbursment', 'foodReimbursment',
      'pf', 'professionalTax', 'lop'
    ];

    const regularExclude = ['hourlyRate', 'hoursWorked'];

    if (payroll.isHourly) hourlyExclude.forEach(f => excludeFields.add(f));
    else regularExclude.forEach(f => excludeFields.add(f));

    return Object.entries(payroll).filter(([key, _]) => !excludeFields.has(key));
  };

  return (
    <div>
      <h2>Run Payroll</h2>

      <div style={{ marginBottom: '1rem' }}>
        <input
          type="text"
          placeholder="Enter Employee ID"
          value={employeeId}
          onChange={(e) => setEmployeeId(e.target.value)}
          style={{ marginRight: '1rem' }}
        />
        <select value={month} onChange={(e) => setMonth(parseInt(e.target.value))}>
          {[...Array(12)].map((_, i) => (
            <option key={i + 1} value={i + 1}>
              {new Date(0, i).toLocaleString('default', { month: 'long' })}
            </option>
          ))}
        </select>
        <input
          type="number"
          min="2020"
          value={year}
          onChange={(e) => setYear(parseInt(e.target.value))}
          style={{ marginLeft: '1rem' }}
        />
        <button onClick={handleGenerate} disabled={isLoading} style={{ marginLeft: '1rem' }}>
          {isLoading ? 'Generating...' : 'Run Payroll'}
        </button>
      </div>

      {message && <div style={{ marginBottom: '1rem', color: message.startsWith('❌') ? 'red' : 'green' }}>{message}</div>}

      {renderTable(hourlyPayrolls, 'Hourly Payrolls')}
      {renderTable(otherPayrolls, 'Monthly Payrolls')}

      {selectedPayroll && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>Payroll Details - {selectedPayroll.employeeId}</h3>
            <ul style={{ listStyle: 'none', padding: 0, maxHeight: '300px', overflowY: 'auto' }}>
              {filteredModalFields(selectedPayroll).map(([key, value]) => (
                <li key={key} style={{ marginBottom: '0.5rem' }}>
                  <strong>{key}:</strong> {String(value)}
                </li>
              ))}
            </ul>
            <div className="modal-actions">
              <button onClick={closeModal}>Close</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
